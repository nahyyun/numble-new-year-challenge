(()=>{"use strict";class t{state;constructor({target:t,props:e}){this.$target=t,this.props=e,this.init(),this.render(),this.mounted(),this.event()}init(){}template(){return""}mounted(){}render(){this.$target.innerHTML=this.template()}event(){}setState(t){this.isSameState(t)||(this.state=t,this.render())}isSameState(t){return JSON.stringify(this.state)===JSON.stringify(t)}}const e=t=>document.querySelector(t),s=(t,e)=>{const s=document.createElement(t);return s.append(e),s},n=class extends t{template(){const{postId:t,image:e,title:s,content:n}=this.props.post;return`\n        <li class="post post-${t}">\n            <img alt="random image" src=${e}/>\n            <div>\n                <strong>${s}</strong>\n                <span>${n}</span>\n            </div>\n        </li>\n     `}render(){this.$target.insertAdjacentHTML("afterbegin",this.template())}event(){const{postId:t}=this.props.post;e(`.post-${t}`).addEventListener("click",(()=>{T(`/post/${t}`)}))}},a=class extends t{template(){return'<div id="loading-bar"></div>'}},o=class extends t{init(){this.snackbar=null}render(){if(this.isChidrenCountMax())return;const t=s("div",s("span",this.props.message));this.snackbar=t,this.$target.append(this.snackbar)}mounted(){this.snackbar&&setTimeout((()=>this.$target.removeChild(this.snackbar)),3e3)}isChidrenCountMax(){return this.$target.children.length>2}},i=(t,e)=>({method:t,headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r=async t=>{const e=await fetch(`/api/${t}`,{method:"GET"}),s=await e.json();if(e.ok)return s;throw console.dir(s),s},p=async(t,e)=>{const s=await fetch(`/api/${t}`,i("POST",e)),n=await s.json();if(s.ok)return n;throw console.dir(n),n},d=async(t,e)=>{const s=await fetch(`/api/${t}`,i("PATCH",e)),n=await s.json();if(s.ok)return n;throw console.dir(n),n},c=async t=>{const e=await fetch(`/api/${t}`,{method:"DELETE"}),s=await e.json();if(e.ok)return s;throw console.dir(s),s},m={image:"랜덤 이미지를 추가해주세요.",title:"제목을 입력해주세요.",content:"내용을 입력해주세요.",comment:"댓글을 입력해주세요.",loadPosts:"게시물 목록을 불러오는 데 실패했습니다.",addPost:"게시글 추가에 실패했습니다.",editPost:"수정에 실패했습니다.",deletePost:"게시글 삭제에 실패했습니다."},l=class extends t{init(){this.state={isLoading:!1,posts:[],error:!1}}template(){return'<ul class="post-list"></ul>'}render(){return this.state.isLoading?new a({target:this.$target}):this.state.error?new o({target:e("#snackbar"),props:{message:m.loadPosts}}):(this.$target.innerHTML=this.template(),void this.state.posts.forEach((t=>new n({target:e(".post-list"),props:{post:t}}))))}mounted(){this.getPostList()}async getPostList(){try{this.setState({...this.state,isLoading:!0,error:!1});const{code:t,data:e}=await r("posts");200===t&&this.setState({...this.state,posts:e.posts,isLoading:!1})}catch(t){this.setState({...this.state,isLoading:!1,error:t.message})}}},h=class extends t{template(){const{type:t,className:e,text:s}=this.props;return`<button \n              type="${t}" \n              class="${e}" \n            >${s}\n            </button>`}render(){this.$target.insertAdjacentHTML(this.props.position,this.template())}event(){e(`.${this.props.className}`).addEventListener("click",(()=>{this.props.handleClick&&this.props.handleClick()}))}},g=class extends t{template(){return(this.props.isMain?"":'<a href="javascript:void(0)" id="btn-back">\n            <img \n                id="back-icon"\n                src="https://hpny-1.s3.ap-northeast-2.amazonaws.com/icon_chevron_left.svg"\n            />\n        </a>')+'\n        <a href="javascript:void(0)" id="logo">\n            <strong>HPNY 2023</strong>\n        </a>'}event(){e("#logo").addEventListener("click",(()=>{T("/")})),this.props.isMain||e("#btn-back")?.addEventListener("click",(()=>{history.go(-1)}))}},u=t=>{for(let s in t)if(!t[s])return new o({target:e("#snackbar"),props:{message:m[s]}}),!1;return!0},f=class extends t{init(){this.imageUrl=""}template(){return'\n        <form id="postAddForm">\n            <label for="formTitle">제목</label>\n            <input\n                id="formTitle"\n                placeholder="제목을 입력하세요."\n            />\n            <label for="formContent">내용</label>\n            <textarea\n                id="formContent"\n                row="6"\n                placeholder="내용을 입력하세요."\n            ></textarea>\n        </form>\n     '}render(){this.$target.insertAdjacentHTML("afterbegin",this.template());const t=document.forms.postAddForm;new h({target:e(".post-add-form-container"),props:{position:"afterbegin",type:"button",className:"btn-upload-image",text:"랜덤 이미지 추가하기",handleClick:()=>this.getRandomImage()}}),new h({target:t,props:{position:"beforeend",type:"submit",className:"btn-add-post",text:"작성 완료"}})}event(){const t=document.forms.postAddForm;t.addEventListener("submit",(e=>{e.preventDefault(),this.submitHandler(t)}))}submitHandler(t){const{formTitle:e,formContent:s}=t.elements,n={image:this.imageUrl,title:e.value,content:s.value};u(n)&&this.addPost(n)}async addPost({image:t,title:s,content:n}){try{const{code:a}=await p("post",{image:t,title:s,content:n});201===a&&(new o({target:e("#snackbar"),props:{message:"게시글이 추가되었습니다."}}),T("/"))}catch(t){new o({target:e("#snackbar"),props:{message:m.addPost}})}}async getRandomImage(){const t=await fetch(`https://api.unsplash.com/photos/random?client_id=${UNSPLASH_API_KEY}`,{method:"GET"}),{urls:{regular:s}}=await t.json();this.imageUrl=s,e(".btn-upload-image").disabled=!0}},w=class extends t{template(){const{title:t="",content:e=""}=this.props.post;return`\n        <form id="postEditForm">\n            <label for="formTitle">제목</label>\n           <input \n                id="formTitle"\n                value="${t}"\n            />\n            <label for="formContent">내용</label>\n            <textarea\n                id="formContent"\n                row="6"\n            >${e}</textarea>\n        </form>\n     `}render(){this.$target.insertAdjacentHTML("afterbegin",this.template()),new h({target:document.forms.postEditForm,props:{position:"beforeend",type:"submit",className:"btn-edit-post",text:"수정 완료"}})}event(){const t=document.forms.postEditForm;t.addEventListener("submit",(e=>{e.preventDefault(),this.submitHandler(t)}))}submitHandler(t){const{formTitle:e,formContent:s}=t.elements,n={title:e.value,content:s.value};u(n)&&this.editPost({post:this.props.post,formValue:n})}async editPost({post:{postId:t,image:s},formValue:{title:n,content:a}}){try{const{code:i}=await d(`post/${t}`,{image:s,title:n,content:a});200===i&&(new o({target:e("#snackbar"),props:{message:"수정이 완료되었습니다."}}),T(`/post/${t}`))}catch(t){new o({target:e("#snackbar"),props:{message:m.editPost}})}}},b=class extends t{template(){const{title:t="",content:e="",image:s="",updatedAt:n=""}=this.props.detailInfo,[a]=n.split("T");return`\n        <div class="post-image">\n            <img src="${s}" width="200px" alt="random image"/>\n        </div>\n        <strong>${t}</strong>\n        <span class="date">${a}</span>\n        <span>${e}</span>\n        <div class="btns-post-detail"></div>\n     `}render(){this.$target.insertAdjacentHTML("afterbegin",this.template());const{postId:t}=this.props.detailInfo;new h({target:e(".btns-post-detail"),props:{position:"beforeend",type:"button",className:"btn-post-edit",text:"수정 📝",handleClick:()=>this.goToEditPage(t)}}),new h({target:e(".btns-post-detail"),props:{position:"beforeend",type:"button",className:"btn-post-delete",text:"삭제 🗑",handleClick:()=>this.deletePost(t)}})}goToEditPage(t){T(`/edit/${t}`,this.props.detailInfo)}async deletePost(t){const{code:s}=await c(`post/${t}`);if(200===s)return new o({target:e("#snackbar"),props:{message:"게시글이 삭제되었습니다."}}),T("/");new o({target:e("#snackbar"),props:{message:m.deletePost}})}},v=class extends t{template(){const{commentId:t,content:e}=this.props.comment;return`\n        <li data-id="${t}" class="comment-${t}">\n          <span>${e}</span>\n        </li>\n     `}render(){this.$target.insertAdjacentHTML("beforeend",this.template());const{commentId:t}=this.props.comment;new h({target:e(`.comment-${t}`),props:{position:"beforeend",type:"button",className:`btn-comment-delete-${t}`,text:"삭제",handleClick:()=>this.props.deleteComment(t)}})}},$=class extends t{template(){return'\n        <form id="addCommentForm">\n            <input id="comment" type="text"/>\n        </form>\n     '}render(){this.$target.insertAdjacentHTML("beforeend",this.template());const t=document.forms.addCommentForm;new h({target:t,props:{position:"beforeend",type:"submit",className:"btn-add-comment",text:"✏️"}})}event(){const t=document.forms.addCommentForm;t.addEventListener("submit",(e=>{e.preventDefault();const s=t.comment.value;if(u({comment:s})){const{addComment:t}=this.props;t(s)}}))}},L=class extends t{init(){const{postId:t,comments:e}=this.props;this.state={postId:t,comments:e}}template(){return'<ul class="comment-list"></ul>\n    '}render(){this.$target.innerHTML=this.template(),this.state.comments.forEach((t=>new v({target:e(".comment-list"),props:{comment:t,deleteComment:t=>this.deleteComment(t)}}))),new $({target:this.$target,props:{postId:this.state.postId,addComment:t=>this.addComment(t)}})}async addComment(t){try{const{code:e,data:s}=await p(`comment/${this.state.postId}`,{content:t});201===e&&this.setState({...this.state,comments:[...this.state.comments,s]})}catch(t){console.dir(t)}}async deleteComment(t){const{code:e}=await c(`comment/${t}`);200===e&&this.setState({...this.state,comments:this.state.comments.filter((e=>e.commentId!==t))})}},y=[{path:"/",view:class extends t{template(){return'<main id="main-page">\n              <nav id="navbar-wrapper"></nav>\n              <div class="btn-add-post-wrapper"></div>\n              <section class="post-list-container"></section>\n            </main>'}render(){this.$target.innerHTML=this.template(),new g({target:e("#navbar-wrapper"),props:{isMain:!0}}),new h({target:e(".btn-add-post-wrapper"),props:{position:"afterbegin",type:"button",className:"btn-add-post",text:"게시글 등록하기",handleClick:this.moveToAddPage}}),new l({target:e(".post-list-container")})}moveToAddPage(){T("/write")}}},{path:"/write",view:class extends t{template(){return'<main>\n              <nav id="navbar-wrapper"></nav>\n              <section class="post-add-form-container"></section>\n            </main>'}render(){this.$target.innerHTML=this.template(),new g({target:e("#navbar-wrapper"),props:{isMain:!1}}),new f({target:e(".post-add-form-container")})}}},{path:"/edit/:postId",view:class extends t{init(){const t=history.state??{};this.state={post:t,isLoading:!1}}template(){return'<main>\n              <nav id="navbar-wrapper"></nav>\n              <section class="post-edit-form-container"></section>\n           </main>'}render(){if(this.state.isLoading)return new a({target:this.$target});this.$target.innerHTML=this.template(),new g({target:e("#navbar-wrapper"),props:{isMain:!1}}),new w({target:e(".post-edit-form-container"),props:{post:this.state.post}})}mounted(){if(!this.state.post.postId){const t=location.pathname.split("/").pop();this.getPostDetail(t)}}async getPostDetail(t){try{this.setState({...this.state,isLoading:!0});const{success:e,data:s}=await r(`post/${t}`);e&&this.setState({post:s.post,isLoading:!1})}catch(t){this.setState({...this.state,isLoading:!1}),T("/notfound")}}}},{path:"/post/:postId",view:class extends t{init(){this.state={post:{},comments:[],isLoading:!1}}template(){return'<main>\n              <nav id="navbar-wrapper"></nav>\n              <section class="post-detail-container"></section>\n              <section class="comments-container"></section>\n            </main>'}render(){if(this.state.isLoading)return new a({target:e(".post-detail-container")});this.$target.innerHTML=this.template();const{post:t,comments:s}=this.state;new g({target:e("#navbar-wrapper"),props:{isMain:!1}}),new b({target:e(".post-detail-container"),props:{detailInfo:t}}),new L({target:e(".comments-container"),props:{postId:this.props.params,comments:s}})}mounted(){this.getPostDetail()}async getPostDetail(){const t=this.props.params;try{this.setState({...this.state,isLoading:!0});const{success:e,data:{post:s,comments:n}}=await r(`post/${t}`);e&&this.setState({...this.state,isLoading:!1,post:s,comments:n})}catch(t){this.setState({...this.state,isLoading:!1}),T("/notfound")}}}},{path:"/notfound",view:class extends t{template(){return'<main id="notfound-page">\n              <span>Page Not Found</span>\n            </main>'}render(){this.$target.innerHTML=this.template(),new h({target:e("#notfound-page"),props:{position:"beforeend",type:"button",className:"btn-goto-main",text:"메인으로 이동",handleClick:this.goToMainPage}})}goToMainPage(){T("/")}}}],x=t=>{const[s,n]=(t=>{const e=[];return y.forEach((s=>{const n=(a=s.path,new RegExp("^"+a.replace(/\//g,"\\/").replace(/:\w+/g,"(\\w+)")+"$"));var a;const o=t.match(n);o&&e.push(s,o)})),e})(t);if(s){const t=(t=>{const[,e]=t;if("string"==typeof e)return e})(n)??null;return new s.view({target:e("#app"),props:{params:t}})}new y[y.length-1].view({target:e("#app")})},T=(t,e)=>{history.pushState(e,null,`${t}`),x(t)};window.onpopstate=()=>{x(location.pathname)},window.addEventListener("DOMContentLoaded",(()=>{T(location.pathname)}))})();